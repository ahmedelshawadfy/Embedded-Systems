
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001bf  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000143  00000000  00000000  0000031b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ea  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000173  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001f  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    while(1)
    {
        //TODO:: Please write your application code
		uint8_t i;
		DDRB |= (1<<PB3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
		PWM_init();
  6e:	0e 94 46 00 	call	0x8c	; 0x8c <PWM_init>
		// for increasing brightness
		for(i=0; i<=255; i++)
  72:	80 e0       	ldi	r24, 0x00	; 0
		{
				OCR0 = i;
  74:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	3d e0       	ldi	r19, 0x0D	; 13
  7a:	93 e0       	ldi	r25, 0x03	; 3
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	30 40       	sbci	r19, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
        //TODO:: Please write your application code
		uint8_t i;
		DDRB |= (1<<PB3);
		PWM_init();
		// for increasing brightness
		for(i=0; i<=255; i++)
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	f4 cf       	rjmp	.-24     	; 0x74 <main+0x8>

0000008c <PWM_init>:
	/*// enable timer by selecting the clock source with no prescaler
	TCCR0 |= (1<<CS00);
	// select the mode(PWM mode...) and OC0 behavior (clear the bit on match)
	TCCR0 |= (1<<WGM00) |(1<<COM01);*/
	
	 TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	89 66       	ori	r24, 0x69	; 105
  90:	83 bf       	out	0x33, r24	; 51
  92:	08 95       	ret

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
