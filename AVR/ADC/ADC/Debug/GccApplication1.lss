
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001c8  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000132  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017f  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016f  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003d  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  7a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_INIT>:
 void ADC_INIT();
 uint16_t ADC_CONV(uint8_t channel);
 
 void ADC_INIT()
 {
	 ADMUX |= (1<<REFS0) ; // set reference and channel
  82:	3e 9a       	sbi	0x07, 6	; 7
	 ADCSRA |= (1<<ADIE) | (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2); // enable ADC module and select prescaler
  84:	86 b1       	in	r24, 0x06	; 6
  86:	8e 68       	ori	r24, 0x8E	; 142
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <ADC_CONV>:
 
 uint16_t ADC_CONV(uint8_t channel)
 {
	 channel &= 0x07; // anding with 7 will always keep the value between 0 and 7
	 
	 ADMUX = (ADMUX & 0xF8)|channel; // clear last three bits and select desired channel 
  8c:	97 b1       	in	r25, 0x07	; 7
	 ADCSRA |= (1<<ADIE) | (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2); // enable ADC module and select prescaler
 }
 
 uint16_t ADC_CONV(uint8_t channel)
 {
	 channel &= 0x07; // anding with 7 will always keep the value between 0 and 7
  8e:	87 70       	andi	r24, 0x07	; 7
	 
	 ADMUX = (ADMUX & 0xF8)|channel; // clear last three bits and select desired channel 
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	98 2b       	or	r25, r24
  94:	97 b9       	out	0x07, r25	; 7
	 
	 ADCSRA |= (1<<ADSC); // start conversion1
  96:	36 9a       	sbi	0x06, 6	; 6
	 
	 // wait till conversion completes and ADSC becomes 0
	 while(ADCSRA & (1<<ADSC))
  98:	36 99       	sbic	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <ADC_CONV+0xc>
	 ;
	 return ADC ;
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	08 95       	ret

000000a2 <main>:
#define PORT_ON(port,pin) port |= (1<<pin)
#define PORT_OFF(port,pin) port &= ~(1<<pin)
int main(void)
{
	unsigned int adc_value; // Variable to hold ADC result
	DDRC=0xff; // Set Port D as Output
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  a6:	15 ba       	out	0x15, r1	; 21
	
	ADC_INIT();
  a8:	0e 94 41 00 	call	0x82	; 0x82 <ADC_INIT>
	
	while (1)
	{
		adc_value = ADC_CONV(0); // Start conversion
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_CONV>
		//adc_value = ADC; //Store ADC value
		if (adc_value < 512)
  b4:	81 15       	cp	r24, r1
  b6:	92 40       	sbci	r25, 0x02	; 2
  b8:	18 f4       	brcc	.+6      	; 0xc0 <main+0x1e>
		{
			PORT_OFF(PORTC,7); // Toggle LEDs
  ba:	af 98       	cbi	0x15, 7	; 21
			PORT_ON (PORTC,6);
  bc:	ae 9a       	sbi	0x15, 6	; 21
  be:	f6 cf       	rjmp	.-20     	; 0xac <main+0xa>
		}
		else
		{
			PORT_ON(PORTC,7); // Toggle LEDs
  c0:	af 9a       	sbi	0x15, 7	; 21
			PORT_OFF (PORTC,6);
  c2:	ae 98       	cbi	0x15, 6	; 21
  c4:	f3 cf       	rjmp	.-26     	; 0xac <main+0xa>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
