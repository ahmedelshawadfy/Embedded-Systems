
TimerNormlMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000014b  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ec  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000189  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015b  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
    while(1)
    {
        //TODO:: Please write your application code		
		DDRB = (1<<PB3);
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	cd 2f       	mov	r28, r29
  70:	c7 bb       	out	0x17, r28	; 23
		Timer0_Init();
  72:	0e 94 45 00 	call	0x8a	; 0x8a <Timer0_Init>
		Timer0_start();
  76:	0e 94 4c 00 	call	0x98	; 0x98 <Timer0_start>
		if(TCNT0 == OCR0){
  7a:	92 b7       	in	r25, 0x32	; 50
  7c:	8c b7       	in	r24, 0x3c	; 60
  7e:	98 13       	cpse	r25, r24
  80:	f7 cf       	rjmp	.-18     	; 0x70 <main+0x4>
		  PORTB ^= (1<<PB3);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	8d 27       	eor	r24, r29
  86:	88 bb       	out	0x18, r24	; 24
  88:	f3 cf       	rjmp	.-26     	; 0x70 <main+0x4>

0000008a <Timer0_Init>:
 */ 
#include <avr/io.h>
void Timer0_Init(void)
{
	//set clock source to enable timer(internal clock...with 1024 prescaler)
	  TCCR0 |= (1<<CS00)|(1<<CS02);
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	83 bf       	out	0x33, r24	; 51
	//select mode(Normal Mode set by default..toggle the OC0)
	  TCCR0 |= (1<<COM00);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	80 61       	ori	r24, 0x10	; 16
  94:	83 bf       	out	0x33, r24	; 51
  96:	08 95       	ret

00000098 <Timer0_start>:
	  
}

void Timer0_start()
{
	OCR0 |= 1;
  98:	8c b7       	in	r24, 0x3c	; 60
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	8c bf       	out	0x3c, r24	; 60
  9e:	08 95       	ret

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
