
StepperMotorUsingPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000017a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000032a  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000218  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e3  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021a  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004f  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 16000000UL
uint32_t duty = 49151;//.75*65535

int main(void)
{
	pwm_init();
  96:	0e 94 97 00 	call	0x12e	; 0x12e <pwm_init>
	USART_Init();
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Init>
		{
			duty = 32767;//.5 duty cycle
		}
		else
		{
			duty = 49151;//.75 duty cycle
  9e:	0f 2e       	mov	r0, r31
  a0:	cc 24       	eor	r12, r12
  a2:	ca 94       	dec	r12
  a4:	ff eb       	ldi	r31, 0xBF	; 191
  a6:	df 2e       	mov	r13, r31
  a8:	e1 2c       	mov	r14, r1
  aa:	f1 2c       	mov	r15, r1
  ac:	f0 2d       	mov	r31, r0
		{
			duty = 16383;//.25 duty cycle
		}
		else if (ch =='h')
		{
			duty = 32767;//.5 duty cycle
  ae:	0f 2e       	mov	r0, r31
  b0:	44 24       	eor	r4, r4
  b2:	4a 94       	dec	r4
  b4:	ff e7       	ldi	r31, 0x7F	; 127
  b6:	5f 2e       	mov	r5, r31
  b8:	61 2c       	mov	r6, r1
  ba:	71 2c       	mov	r7, r1
  bc:	f0 2d       	mov	r31, r0
    {
        //TODO:: Please write your application code
		unsigned char ch = USART_Receive();
		if (ch =='q')
		{
			duty = 16383;//.25 duty cycle
  be:	0f 2e       	mov	r0, r31
  c0:	88 24       	eor	r8, r8
  c2:	8a 94       	dec	r8
  c4:	ff e3       	ldi	r31, 0x3F	; 63
  c6:	9f 2e       	mov	r9, r31
  c8:	a1 2c       	mov	r10, r1
  ca:	b1 2c       	mov	r11, r1
  cc:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	c0 e8       	ldi	r28, 0x80	; 128
  d0:	dc e0       	ldi	r29, 0x0C	; 12
	pwm_init();
	USART_Init();
    while(1)
    {
        //TODO:: Please write your application code
		unsigned char ch = USART_Receive();
  d2:	0e 94 b3 00 	call	0x166	; 0x166 <USART_Receive>
		if (ch =='q')
  d6:	81 37       	cpi	r24, 0x71	; 113
  d8:	49 f4       	brne	.+18     	; 0xec <main+0x56>
		{
			duty = 16383;//.25 duty cycle
  da:	80 92 00 01 	sts	0x0100, r8
  de:	90 92 01 01 	sts	0x0101, r9
  e2:	a0 92 02 01 	sts	0x0102, r10
  e6:	b0 92 03 01 	sts	0x0103, r11
  ea:	13 c0       	rjmp	.+38     	; 0x112 <main+0x7c>
		}
		else if (ch =='h')
  ec:	88 36       	cpi	r24, 0x68	; 104
  ee:	49 f4       	brne	.+18     	; 0x102 <main+0x6c>
		{
			duty = 32767;//.5 duty cycle
  f0:	40 92 00 01 	sts	0x0100, r4
  f4:	50 92 01 01 	sts	0x0101, r5
  f8:	60 92 02 01 	sts	0x0102, r6
  fc:	70 92 03 01 	sts	0x0103, r7
 100:	08 c0       	rjmp	.+16     	; 0x112 <main+0x7c>
		}
		else
		{
			duty = 49151;//.75 duty cycle
 102:	c0 92 00 01 	sts	0x0100, r12
 106:	d0 92 01 01 	sts	0x0101, r13
 10a:	e0 92 02 01 	sts	0x0102, r14
 10e:	f0 92 03 01 	sts	0x0103, r15
		}
		 
	    stepper_pwm(duty);
 112:	60 91 00 01 	lds	r22, 0x0100
 116:	70 91 01 01 	lds	r23, 0x0101
 11a:	80 91 02 01 	lds	r24, 0x0102
 11e:	90 91 03 01 	lds	r25, 0x0103
 122:	0e 94 a3 00 	call	0x146	; 0x146 <stepper_pwm>
 126:	ce 01       	movw	r24, r28
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x92>
 12c:	d2 cf       	rjmp	.-92     	; 0xd2 <main+0x3c>

0000012e <pwm_init>:
#include "macros.h"

void pwm_init()
{
	/* set the wave generation mode as fast pwm */
	TCCR1B |= 0x19;  //set the clock source
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	89 61       	ori	r24, 0x19	; 25
 136:	80 83       	st	Z, r24
	TCCR1A |= 0x53;  //set the output compare mode as toggle the OC1A
 138:	e0 e8       	ldi	r30, 0x80	; 128
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 65       	ori	r24, 0x53	; 83
 140:	80 83       	st	Z, r24
	
	set_Direction_output(DDRB,PB1); // set PB1 as Output compare pin "OC1A"
 142:	21 9a       	sbi	0x04, 1	; 4
 144:	08 95       	ret

00000146 <stepper_pwm>:
}
void stepper_pwm(uint32_t duty)	
{
	OCR1A = duty;	
 146:	70 93 89 00 	sts	0x0089, r23
 14a:	60 93 88 00 	sts	0x0088, r22
 14e:	08 95       	ret

00000150 <USART_Init>:
#include "macros.h"

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 150:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 154:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	80 93 c2 00 	sts	0x00C2, r24
 164:	08 95       	ret

00000166 <USART_Receive>:
	UDR0 = data;
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6
}
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
