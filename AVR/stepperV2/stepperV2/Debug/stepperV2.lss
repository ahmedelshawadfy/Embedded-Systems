
stepperV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024f  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000170  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000248  00000000  00000000  00000587  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000007c  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017f  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000011d  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	c8 ef       	ldi	r28, 0xF8	; 248
  8a:	d7 e0       	ldi	r29, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	17 e2       	ldi	r17, 0x27	; 39
	for(uint16_t i=0;i<24*85;i++)
	{
		StepperStepCW();     //Step Clock wise
  90:	0e 94 6e 00 	call	0xdc	; 0xdc <StepperStepCW>
  94:	c8 01       	movw	r24, r16
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x16>
  9a:	21 97       	sbiw	r28, 0x01	; 1
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	for(uint16_t i=0;i<24*85;i++)
  9c:	20 97       	sbiw	r28, 0x00	; 0
  9e:	c1 f7       	brne	.-16     	; 0x90 <main+0x10>
  a0:	c8 ef       	ldi	r28, 0xF8	; 248
  a2:	d7 e0       	ldi	r29, 0x07	; 7
  a4:	00 e1       	ldi	r16, 0x10	; 16
  a6:	17 e2       	ldi	r17, 0x27	; 39
		_delay_loop_2(10000);
	}

	for(uint16_t i=0;i<24*85;i++)
	{
		StepperStepCCW();    //Step Counter Clock wise
  a8:	0e 94 63 00 	call	0xc6	; 0xc6 <StepperStepCCW>
  ac:	c8 01       	movw	r24, r16
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	21 97       	sbiw	r28, 0x01	; 1
		StepperStepCW();     //Step Clock wise

		_delay_loop_2(10000);
	}

	for(uint16_t i=0;i<24*85;i++)
  b4:	20 97       	sbiw	r28, 0x00	; 0
  b6:	c1 f7       	brne	.-16     	; 0xa8 <main+0x28>
	{
		StepperStepCCW();    //Step Counter Clock wise

		_delay_loop_2(10000);
	}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <StepperStepCCW>:
	__STEPPER_PORT|=(1<<STEPPER_POS);
}

void StepperStepCCW()
{
	uint8_t temp=(__STEPPER_PORT & (0x0F<<STEPPER_POS));
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8f 70       	andi	r24, 0x0F	; 15
	temp=temp>>(STEPPER_POS);
	temp=temp<<1;
  ca:	88 0f       	add	r24, r24

	if(temp>(8))
  cc:	89 30       	cpi	r24, 0x09	; 9
  ce:	08 f0       	brcs	.+2      	; 0xd2 <StepperStepCCW+0xc>
		temp=1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
	
	__STEPPER_PORT=(__STEPPER_PORT & ~(0x0F<<STEPPER_POS))|(temp<<STEPPER_POS);
  d2:	98 b1       	in	r25, 0x08	; 8
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
  da:	08 95       	ret

000000dc <StepperStepCW>:
}

void StepperStepCW()
{
	uint8_t temp=(__STEPPER_PORT & (0x0F<<STEPPER_POS));
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8f 70       	andi	r24, 0x0F	; 15
	temp=temp>>(STEPPER_POS);
	temp=temp>>1;
  e0:	86 95       	lsr	r24

	if(temp==0)
  e2:	09 f4       	brne	.+2      	; 0xe6 <StepperStepCW+0xa>
		temp=8;
  e4:	88 e0       	ldi	r24, 0x08	; 8
	
	__STEPPER_PORT=(__STEPPER_PORT & ~(0x0F<<STEPPER_POS))|(temp<<STEPPER_POS);
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	89 2b       	or	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
