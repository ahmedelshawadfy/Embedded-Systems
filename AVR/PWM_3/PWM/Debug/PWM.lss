
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000127  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ca  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016b  00000000  00000000  0000037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000139  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a2  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Wait>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
void Wait()
{
  6c:	82 e3       	ldi	r24, 0x32	; 50
  6e:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <Wait+0xa>
  7a:	f9 01       	movw	r30, r18
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <Wait+0x10>
  80:	01 97       	sbiw	r24, 0x01	; 1
	uint16_t i;
	for(i=0;i<50;i++)
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	b9 f7       	brne	.-18     	; 0x74 <Wait+0x8>
	{
		_delay_loop_2(0);
		//_delay_loop_2(0);
		_delay_loop_2(0);
	}
}
  86:	08 95       	ret

00000088 <main>:
int main()
{
	//FOR TIMER1
	int i;
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	82 6a       	ori	r24, 0xA2	; 162
  8c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	8b 61       	ori	r24, 0x1B	; 27
  92:	8e bd       	out	0x2e, r24	; 46
	ICR1=4999;  //fPWM=50Hz
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	97 bd       	out	0x27, r25	; 39
  9a:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	80 63       	ori	r24, 0x30	; 48
  a0:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		for(i=316; i<=535; i++)
  a2:	8c e3       	ldi	r24, 0x3C	; 60
  a4:	91 e0       	ldi	r25, 0x01	; 1
		{
			OCR1A=i;
			
		}
		Wait();
		for(i=535; i>=97; i--)
  a6:	07 e1       	ldi	r16, 0x17	; 23
  a8:	12 e0       	ldi	r17, 0x02	; 2
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
	ICR1=4999;  //fPWM=50Hz
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
	while(1)
	{
		for(i=316; i<=535; i++)
  aa:	dc e3       	ldi	r29, 0x3C	; 60
  ac:	c1 e0       	ldi	r28, 0x01	; 1
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x2e>
		{
			OCR1A=i;
  b0:	9b bd       	out	0x2b, r25	; 43
  b2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
	ICR1=4999;  //fPWM=50Hz
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
	while(1)
	{
		for(i=316; i<=535; i++)
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	88 31       	cpi	r24, 0x18	; 24
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	92 07       	cpc	r25, r18
  bc:	cc f3       	brlt	.-14     	; 0xb0 <main+0x28>
		{
			OCR1A=i;
			
		}
		Wait();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <Wait>
		for(i=535; i>=97; i--)
  c2:	80 2f       	mov	r24, r16
  c4:	91 2f       	mov	r25, r17
		{
			OCR1A=i;
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
		{
			OCR1A=i;
			
		}
		Wait();
		for(i=535; i>=97; i--)
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	80 36       	cpi	r24, 0x60	; 96
  ce:	91 05       	cpc	r25, r1
  d0:	d1 f7       	brne	.-12     	; 0xc6 <main+0x3e>
		{
			OCR1A=i;
			
		}
		Wait();
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <Wait>
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
	ICR1=4999;  //fPWM=50Hz
	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Output
	while(1)
	{
		for(i=316; i<=535; i++)
  d6:	8d 2f       	mov	r24, r29
  d8:	9c 2f       	mov	r25, r28
		Wait();
		OCR1A=97;   //0 degree
		Wait();
		OCR1A=535;  //180 degree
		Wait();*/
	}
  da:	ed cf       	rjmp	.-38     	; 0xb6 <main+0x2e>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
